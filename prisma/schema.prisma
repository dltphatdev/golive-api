// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserVerifyStatus {
  Unverified
  Verified
  Banned
}

enum UserGender {
  Male
  FeMale
}

model User {
  id                   Int              @id @default(autoincrement())
  email                String           @unique
  forgot_password_code String?
  verify_code          String?
  password             String
  fullname             String?
  verify               UserVerifyStatus @default(Unverified)
  avatar               String?          @db.VarChar(255)
  address              String?
  phone                String?
  gender               UserGender       @default(Male)
  spoint               Int              @default(0)
  date_of_birth        DateTime?
  created_at           DateTime         @default(now())
  updated_at           DateTime?
  stepLogs             StepLog[]
  streakLogs           StreakLog[]

  @@index([password])
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique @db.VarChar(512)
  user_id Int
  iat     DateTime
  exp     DateTime

  @@index([exp])
}

model StepLog {
  id            Int      @id @default(autoincrement())
  user_id       Int
  date          DateTime
  steps         Int
  spoint_earned Int      @default(0)
  start_time    DateTime
  last_time     DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, date])
}

model StreakLog {
  id         Int      @id @default(autoincrement())
  user_id    Int
  start_date DateTime
  last_date  DateTime
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}
